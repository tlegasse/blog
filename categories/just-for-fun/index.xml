<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Just for Fun on Tanner Legasse</title><link>https://www.tannerlegasse.com/categories/just-for-fun/</link><description>Recent content in Just for Fun on Tanner Legasse</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 28 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.tannerlegasse.com/categories/just-for-fun/index.xml" rel="self" type="application/rss+xml"/><item><title>Sine and Cosine</title><link>https://www.tannerlegasse.com/projects/demoscene/sin-cosin/</link><pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate><guid>https://www.tannerlegasse.com/projects/demoscene/sin-cosin/</guid><description>&lt;h2>Intro&lt;/h2>
&lt;p>This is the first of many planned articles on the topic of demoscene programming.&lt;/p>
&lt;p>Demos are self contained artistic presentations that are sometimes punctuated by extremely efficient and small code.
 Demoscene developers were typically restricted to extremely limited hardware and storage mediums. While this is
 hardly the case today, I find it prudent to still approach experimentation and learning with this in mind,
 especially when your average, basic node project contains thousands of packages. Yes, I'm a hater, but there's
 something special there.&lt;br> Join me as I explore the core concepts of demoscene development from the context of a
 modern developer interested in learning what it means to get back to basics and develop such incredible works.&lt;/p></description></item></channel></rss>