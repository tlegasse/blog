[{"categories":"Just for fun","contents":"Sin and cosin express the phase of a sin wave either in forward or backwards direction respectively.\nAs such, sin and cosin produce a number between -1 and 1 given an input angle.\nThey're used heavily across animations to produce repeating angular values:\nconst pX = Math.cos(timestamp / timeCoefficient) * rad const pY = Math.sin(timestamp / timeCoefficient) * rad Combinations therein can create cool affects, such as this one where the output \"particle\" follows in a radial fashion around a point on our circle.\nIn the example here, the naked point on our circle is represented by the blue dot.\nOur particle is represented by the orange dot, which is added as an offset to the blue dot's coordinates. Note that it's circling the blue dot 8 times per rotation of the larger circle at half the larger circle's radius. const particlePX = Math.cos(timestamp / timeCoefficient * 8) * (rad / 2) const particlePY = Math.sin(timestamp / timeCoefficient * 8) * (rad / 2) When combined with text, sin can easily create a bouncing letter effect:\nAnd with some color and size function?!\n","permalink":"https://www.tannerlegasse.com/projects/sin-cosin/","tags":["graphics"],"title":"Sin and Cosin"},{"categories":"Shopify","contents":"Welcome! This is the first of many blog posts covering Shopify application development that will be published here. You\u0026rsquo;ll follow me through the project agnostic portions of app build I\u0026rsquo;m working through. You\u0026rsquo;ll see a production ready app from concept and setup to go-live.\nIf you follow along with this series, you\u0026rsquo;ll see various components take shape, code examples, and a general rundown of why I\u0026rsquo;m making architectural decisions. Here\u0026rsquo;s something I probably don\u0026rsquo;t need to tell you; I\u0026rsquo;m not perfect. I also don\u0026rsquo;t pretend to be! So don\u0026rsquo;t expect brilliant code that stands up against every possible use case and every setting. Expect working code that serves as a foundation for fun experiments, lots of learning, and real, working apps. In a lot of cases, I\u0026rsquo;ll be encountering problems and matching them to solutions for the first time ever!\nBefore we proceed, you may be wondering\u0026hellip; Why does this article cover manual implementation in this context? Simple! Life is complex and we won\u0026rsquo;t always be using the Shopify CLI (as nice as it clearly is) to build apps. Authentication is also a really interesting process to understand, and can be pretty daunting the way it\u0026rsquo;s described across the internet. I\u0026rsquo;ll be leveraging NextJS for these articles, but if you don\u0026rsquo;t, beyond the platform specific articles to follow (data validation with Zod? Prisma ORM? Who knows!), you should expect that you can use these guides as a conceptual exercise to get you going.\nLet\u0026rsquo;s kick this baby into gear, shall we?\nAbout Authentication Authentication is the process of validating a connection between services. What\u0026rsquo;s the distribution of responsibility in this process?\nWe need to protect our users\u0026hellip; \u0026hellip; by ensuring a that what\u0026rsquo;s calling us is as they say they are, the Shopify authentication platform.\nTo do this, we\u0026rsquo;ll give Shopify a special link to call with several GET parameters. The important part of this is that we pull out the HMAC header value and put the rest back together alphabetically as one contiguous string, hash that string, and ensure that the HMAC value that Shopify provided matches the HMAC value that we independently calculated ourselves.\nWe\u0026rsquo;ll also be storing a per-authentication string that we define. This is called provided back to us in the nonce parameter as we get access to Shopify, so bear this in mind.\nShopify needs to protect their users\u0026hellip; \u0026hellip; by proving proof that we, as the app vendor, are who we say we are.\nIn order to unlock the front door to the Shopify palace, we\u0026rsquo;ll need a key, naturally. In order to do this, we need the user to grant this key to us, after all, we need to know our guests and know what they\u0026rsquo;ll be up to! To tell Shopify what we\u0026rsquo;ll be doing, we provide a comma separated list of scopes. Depending on the features we want in our app, we may either authenticate store-wide, or on a per-user basis.\nAfter we run through this request pattern and the user says that we deserve the access that we asked for, we check to make sure that nonce is the same as before for this authentication event and use a special validation token that\u0026rsquo;s provided back to us to get the golden key, our access token!\n","permalink":"https://www.tannerlegasse.com/posts/manual-shopify-app-authentication/","tags":["shopify"],"title":"Manual Shopify App Authentication"},{"categories":null,"contents":"Introduction It\u0026rsquo;s 3AM. You need a URL shortener fast. Your boss is breathing down your neck and you have no idea what to do. My new URL shortener is exactly what you need. Okay, kidding aside, this thing isn\u0026rsquo;t geared toward production environments with high throughput or anything like that. Instead, the goal was to showcase skills that I\u0026rsquo;ve picked up over the past several months in my learning journey with Go. It\u0026rsquo;s been really fun, and this project fit the bill of \u0026ldquo;complex enough to be interesting, not so complex that you program yourself into a hole\u0026rdquo;. The latter will come shortly, but for now I\u0026rsquo;m really pleased with how everything\u0026rsquo;s come out.\nNote: This code is still evolving, it may change over the next several weeks\nFeatures The URL shortener only has 2 routes for now, one capturing GET requests for the shortening process, and a dynamic path for long-ening the path again. That\u0026rsquo;s it. Really. BUT there were so many amazing things that this project exposed me to. My previous Go projects were Leetcode problems, so I was missing on a lot of the project-level learnings.\nThings learned Implementing this functionality was a treat. It exposed me to some common patterns and enabled me to learn about the ins and outs, and infrastructure of Go projects. Check out some of my favorite discoveries below.\nTesting Unit testing admittedly isn\u0026rsquo;t every agency or company\u0026rsquo;s top priority, and I have had some ground to make up. Now, in every project I embark on, I aim to provide thoroughly tested code. In this case, I was exposed to database and HTTP server mocking, test fixtures and more. I found the workflow to be intuitive and very helpful in rounding out my chosen feature set.\nHTTP Server While the batteries included approach to the Golang standard library means that it comes with a competent and simple HTTP server, it wasn\u0026rsquo;t a mistake that I chose to work with it. I wanted to ensure that my plans of picking up API related tooling experience was in focus during this project.\nChallenges Embedding: This is the big one, and seems to fly under the radar in terms of what Go developers are exposed to first. But first, what problem will the embedding pattern solve? In short, when you\u0026rsquo;re running unit tests, the execution directory, and packages compiled into the binary are different than when you\u0026rsquo;re running your program normally. You might be able to leverage relative pathing fairly easily when your code is running from the top level directory. When you\u0026rsquo;re testing though\u0026hellip; ooh momma\u0026hellip; the filesystem context changes drastically. In the code below, you can see how I\u0026rsquo;m leveraging the embed package to compile the SQL statements needed to spin up my database table directly into the binary. Now, there are many approaches to solving this problem, and embedding files can definitely be a mistake, but in this case it was just what the doctor ordered.\nFirst, import the sucker.\nimport ( ... \u0026#34;embed\u0026#34; ... ) Using the go:embed directive, we then specify a pattern to match to the local filesystem, and initialize a variable with the\n//go:embed schema.sql var schemaFS embed.FS And then we can use the embedded file just like we would with a normal file!\ncontent, err := schemaFS.ReadFile(\u0026#34;schema.sql\u0026#34;) Understanding the data flow I will admit, dependency injection is an extremely important software design pattern as it allows for a the kind of modularity that makes huge successful projects a possibility, but it can cause issues if you\u0026rsquo;re a beginner exploring new programming languages. In this case, it was a difference between technologies I\u0026rsquo;m used to programming in (JavaScript), and Go. What could that be? Call by value.\nYes, this is a n00b issue, and was the result of storing data in structs within packages, and it tripped me up relentlessly. There would be issues where my database mock wasn\u0026rsquo;t being referenced and called for pattern matching, or data wasn\u0026rsquo;t flowing the way I expected, but I got through it. In hindsight, this one seems pretty silly, bit I\u0026rsquo;m genuinely glad that it came up so prevalantly in this project, because this is just one of those things you need to develop a sort of muscle memory for.\nTechnologies Used Viper: Parses a wide range of configuration file formats. Sqlite3 driver: Helped me drive the database. Go-Sqlmock: My favorite new package. I was genuinely surprised with how intuitive and fun the workflow with go-sqlmock was, seriously! You get to spin up a mock SQL driver, pass it to a function or declare a variable with it, and it pattern matches requests, returning pre-defined results. Conclusions I encourage you to go check out the code, because it was a lot of fun to write. This project was primarily focused on the how\u0026rsquo;s, why\u0026rsquo;s, and the most basic of basics, but the next project may (or may not!) have more real world applications, so stay tuned for more 😉\n","permalink":"https://www.tannerlegasse.com/projects/go-url-shortener/","tags":["project"],"title":"Go URL Shortener"},{"categories":null,"contents":"","permalink":"https://www.tannerlegasse.com/archives/","tags":null,"title":"Archive"}]